# CopyrightÂ© 2017-2023 Quantum Interface (quantuminterface@ipe.kit.edu)
# Richard Gebauer, IPE, Karlsruhe Institute of Technology
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.
# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import pulsegen_pb2 as pulsegen__pb2


class PulseGenServiceStub(object):
    """import "MultiModuleCommon.proto";"""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetNCOFrequency = channel.unary_unary(
            "/pulsegen.PulseGenService/GetNCOFrequency",
            request_serializer=pulsegen__pb2.EndpointIndex.SerializeToString,
            response_deserializer=pulsegen__pb2.Frequency.FromString,
        )
        self.SetNCOFrequency = channel.unary_unary(
            "/pulsegen.PulseGenService/SetNCOFrequency",
            request_serializer=pulsegen__pb2.Frequency.SerializeToString,
            response_deserializer=pulsegen__pb2.Empty.FromString,
        )
        self.Reset = channel.unary_unary(
            "/pulsegen.PulseGenService/Reset",
            request_serializer=pulsegen__pb2.EndpointIndex.SerializeToString,
            response_deserializer=pulsegen__pb2.Empty.FromString,
        )
        self.ResetEnvelopeMemory = channel.unary_unary(
            "/pulsegen.PulseGenService/ResetEnvelopeMemory",
            request_serializer=pulsegen__pb2.EndpointIndex.SerializeToString,
            response_deserializer=pulsegen__pb2.Empty.FromString,
        )
        self.GetAmplitudeCalibration = channel.unary_unary(
            "/pulsegen.PulseGenService/GetAmplitudeCalibration",
            request_serializer=pulsegen__pb2.EndpointIndex.SerializeToString,
            response_deserializer=pulsegen__pb2.AmplitudeCalibration.FromString,
        )
        self.SetAmplitudeCalibration = channel.unary_unary(
            "/pulsegen.PulseGenService/SetAmplitudeCalibration",
            request_serializer=pulsegen__pb2.AmplitudeCalibration.SerializeToString,
            response_deserializer=pulsegen__pb2.Empty.FromString,
        )
        self.GetPhaseOffset = channel.unary_unary(
            "/pulsegen.PulseGenService/GetPhaseOffset",
            request_serializer=pulsegen__pb2.IndexSet.SerializeToString,
            response_deserializer=pulsegen__pb2.PhaseOffset.FromString,
        )
        self.SetPhaseOffset = channel.unary_unary(
            "/pulsegen.PulseGenService/SetPhaseOffset",
            request_serializer=pulsegen__pb2.PhaseOffset.SerializeToString,
            response_deserializer=pulsegen__pb2.Empty.FromString,
        )
        self.GetGlobalPhase = channel.unary_unary(
            "/pulsegen.PulseGenService/GetGlobalPhase",
            request_serializer=pulsegen__pb2.EndpointIndex.SerializeToString,
            response_deserializer=pulsegen__pb2.PhaseOffset.FromString,
        )
        self.GetDuration = channel.unary_unary(
            "/pulsegen.PulseGenService/GetDuration",
            request_serializer=pulsegen__pb2.IndexSet.SerializeToString,
            response_deserializer=pulsegen__pb2.Duration.FromString,
        )
        self.SetDuration = channel.unary_unary(
            "/pulsegen.PulseGenService/SetDuration",
            request_serializer=pulsegen__pb2.Duration.SerializeToString,
            response_deserializer=pulsegen__pb2.Empty.FromString,
        )
        self.GetStartAddressI = channel.unary_unary(
            "/pulsegen.PulseGenService/GetStartAddressI",
            request_serializer=pulsegen__pb2.IndexSet.SerializeToString,
            response_deserializer=pulsegen__pb2.Address.FromString,
        )
        self.SetStartAddressI = channel.unary_unary(
            "/pulsegen.PulseGenService/SetStartAddressI",
            request_serializer=pulsegen__pb2.Address.SerializeToString,
            response_deserializer=pulsegen__pb2.Empty.FromString,
        )
        self.GetStartAddressQ = channel.unary_unary(
            "/pulsegen.PulseGenService/GetStartAddressQ",
            request_serializer=pulsegen__pb2.IndexSet.SerializeToString,
            response_deserializer=pulsegen__pb2.Address.FromString,
        )
        self.SetStartAddressQ = channel.unary_unary(
            "/pulsegen.PulseGenService/SetStartAddressQ",
            request_serializer=pulsegen__pb2.Address.SerializeToString,
            response_deserializer=pulsegen__pb2.Empty.FromString,
        )
        self.TriggerManually = channel.unary_unary(
            "/pulsegen.PulseGenService/TriggerManually",
            request_serializer=pulsegen__pb2.IndexSet.SerializeToString,
            response_deserializer=pulsegen__pb2.Empty.FromString,
        )
        self.LoadPulse = channel.unary_unary(
            "/pulsegen.PulseGenService/LoadPulse",
            request_serializer=pulsegen__pb2.Pulse.SerializeToString,
            response_deserializer=pulsegen__pb2.Empty.FromString,
        )
        self.GetStatusFlags = channel.unary_unary(
            "/pulsegen.PulseGenService/GetStatusFlags",
            request_serializer=pulsegen__pb2.EndpointIndex.SerializeToString,
            response_deserializer=pulsegen__pb2.StatusFlags.FromString,
        )
        self.ResetStatusFlags = channel.unary_unary(
            "/pulsegen.PulseGenService/ResetStatusFlags",
            request_serializer=pulsegen__pb2.EndpointIndex.SerializeToString,
            response_deserializer=pulsegen__pb2.Empty.FromString,
        )


class PulseGenServiceServicer(object):
    """import "MultiModuleCommon.proto";"""

    def GetNCOFrequency(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def SetNCOFrequency(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def Reset(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def ResetEnvelopeMemory(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def GetAmplitudeCalibration(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def SetAmplitudeCalibration(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def GetPhaseOffset(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def SetPhaseOffset(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def GetGlobalPhase(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def GetDuration(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def SetDuration(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def GetStartAddressI(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def SetStartAddressI(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def GetStartAddressQ(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def SetStartAddressQ(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def TriggerManually(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def LoadPulse(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def GetStatusFlags(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def ResetStatusFlags(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_PulseGenServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "GetNCOFrequency": grpc.unary_unary_rpc_method_handler(
            servicer.GetNCOFrequency,
            request_deserializer=pulsegen__pb2.EndpointIndex.FromString,
            response_serializer=pulsegen__pb2.Frequency.SerializeToString,
        ),
        "SetNCOFrequency": grpc.unary_unary_rpc_method_handler(
            servicer.SetNCOFrequency,
            request_deserializer=pulsegen__pb2.Frequency.FromString,
            response_serializer=pulsegen__pb2.Empty.SerializeToString,
        ),
        "Reset": grpc.unary_unary_rpc_method_handler(
            servicer.Reset,
            request_deserializer=pulsegen__pb2.EndpointIndex.FromString,
            response_serializer=pulsegen__pb2.Empty.SerializeToString,
        ),
        "ResetEnvelopeMemory": grpc.unary_unary_rpc_method_handler(
            servicer.ResetEnvelopeMemory,
            request_deserializer=pulsegen__pb2.EndpointIndex.FromString,
            response_serializer=pulsegen__pb2.Empty.SerializeToString,
        ),
        "GetAmplitudeCalibration": grpc.unary_unary_rpc_method_handler(
            servicer.GetAmplitudeCalibration,
            request_deserializer=pulsegen__pb2.EndpointIndex.FromString,
            response_serializer=pulsegen__pb2.AmplitudeCalibration.SerializeToString,
        ),
        "SetAmplitudeCalibration": grpc.unary_unary_rpc_method_handler(
            servicer.SetAmplitudeCalibration,
            request_deserializer=pulsegen__pb2.AmplitudeCalibration.FromString,
            response_serializer=pulsegen__pb2.Empty.SerializeToString,
        ),
        "GetPhaseOffset": grpc.unary_unary_rpc_method_handler(
            servicer.GetPhaseOffset,
            request_deserializer=pulsegen__pb2.IndexSet.FromString,
            response_serializer=pulsegen__pb2.PhaseOffset.SerializeToString,
        ),
        "SetPhaseOffset": grpc.unary_unary_rpc_method_handler(
            servicer.SetPhaseOffset,
            request_deserializer=pulsegen__pb2.PhaseOffset.FromString,
            response_serializer=pulsegen__pb2.Empty.SerializeToString,
        ),
        "GetGlobalPhase": grpc.unary_unary_rpc_method_handler(
            servicer.GetGlobalPhase,
            request_deserializer=pulsegen__pb2.EndpointIndex.FromString,
            response_serializer=pulsegen__pb2.PhaseOffset.SerializeToString,
        ),
        "GetDuration": grpc.unary_unary_rpc_method_handler(
            servicer.GetDuration,
            request_deserializer=pulsegen__pb2.IndexSet.FromString,
            response_serializer=pulsegen__pb2.Duration.SerializeToString,
        ),
        "SetDuration": grpc.unary_unary_rpc_method_handler(
            servicer.SetDuration,
            request_deserializer=pulsegen__pb2.Duration.FromString,
            response_serializer=pulsegen__pb2.Empty.SerializeToString,
        ),
        "GetStartAddressI": grpc.unary_unary_rpc_method_handler(
            servicer.GetStartAddressI,
            request_deserializer=pulsegen__pb2.IndexSet.FromString,
            response_serializer=pulsegen__pb2.Address.SerializeToString,
        ),
        "SetStartAddressI": grpc.unary_unary_rpc_method_handler(
            servicer.SetStartAddressI,
            request_deserializer=pulsegen__pb2.Address.FromString,
            response_serializer=pulsegen__pb2.Empty.SerializeToString,
        ),
        "GetStartAddressQ": grpc.unary_unary_rpc_method_handler(
            servicer.GetStartAddressQ,
            request_deserializer=pulsegen__pb2.IndexSet.FromString,
            response_serializer=pulsegen__pb2.Address.SerializeToString,
        ),
        "SetStartAddressQ": grpc.unary_unary_rpc_method_handler(
            servicer.SetStartAddressQ,
            request_deserializer=pulsegen__pb2.Address.FromString,
            response_serializer=pulsegen__pb2.Empty.SerializeToString,
        ),
        "TriggerManually": grpc.unary_unary_rpc_method_handler(
            servicer.TriggerManually,
            request_deserializer=pulsegen__pb2.IndexSet.FromString,
            response_serializer=pulsegen__pb2.Empty.SerializeToString,
        ),
        "LoadPulse": grpc.unary_unary_rpc_method_handler(
            servicer.LoadPulse,
            request_deserializer=pulsegen__pb2.Pulse.FromString,
            response_serializer=pulsegen__pb2.Empty.SerializeToString,
        ),
        "GetStatusFlags": grpc.unary_unary_rpc_method_handler(
            servicer.GetStatusFlags,
            request_deserializer=pulsegen__pb2.EndpointIndex.FromString,
            response_serializer=pulsegen__pb2.StatusFlags.SerializeToString,
        ),
        "ResetStatusFlags": grpc.unary_unary_rpc_method_handler(
            servicer.ResetStatusFlags,
            request_deserializer=pulsegen__pb2.EndpointIndex.FromString,
            response_serializer=pulsegen__pb2.Empty.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        "pulsegen.PulseGenService", rpc_method_handlers
    )
    server.add_generic_rpc_handlers((generic_handler,))


# This class is part of an EXPERIMENTAL API.
class PulseGenService(object):
    """import "MultiModuleCommon.proto";"""

    @staticmethod
    def GetNCOFrequency(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/pulsegen.PulseGenService/GetNCOFrequency",
            pulsegen__pb2.EndpointIndex.SerializeToString,
            pulsegen__pb2.Frequency.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def SetNCOFrequency(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/pulsegen.PulseGenService/SetNCOFrequency",
            pulsegen__pb2.Frequency.SerializeToString,
            pulsegen__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def Reset(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/pulsegen.PulseGenService/Reset",
            pulsegen__pb2.EndpointIndex.SerializeToString,
            pulsegen__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def ResetEnvelopeMemory(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/pulsegen.PulseGenService/ResetEnvelopeMemory",
            pulsegen__pb2.EndpointIndex.SerializeToString,
            pulsegen__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def GetAmplitudeCalibration(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/pulsegen.PulseGenService/GetAmplitudeCalibration",
            pulsegen__pb2.EndpointIndex.SerializeToString,
            pulsegen__pb2.AmplitudeCalibration.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def SetAmplitudeCalibration(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/pulsegen.PulseGenService/SetAmplitudeCalibration",
            pulsegen__pb2.AmplitudeCalibration.SerializeToString,
            pulsegen__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def GetPhaseOffset(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/pulsegen.PulseGenService/GetPhaseOffset",
            pulsegen__pb2.IndexSet.SerializeToString,
            pulsegen__pb2.PhaseOffset.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def SetPhaseOffset(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/pulsegen.PulseGenService/SetPhaseOffset",
            pulsegen__pb2.PhaseOffset.SerializeToString,
            pulsegen__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def GetGlobalPhase(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/pulsegen.PulseGenService/GetGlobalPhase",
            pulsegen__pb2.EndpointIndex.SerializeToString,
            pulsegen__pb2.PhaseOffset.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def GetDuration(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/pulsegen.PulseGenService/GetDuration",
            pulsegen__pb2.IndexSet.SerializeToString,
            pulsegen__pb2.Duration.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def SetDuration(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/pulsegen.PulseGenService/SetDuration",
            pulsegen__pb2.Duration.SerializeToString,
            pulsegen__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def GetStartAddressI(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/pulsegen.PulseGenService/GetStartAddressI",
            pulsegen__pb2.IndexSet.SerializeToString,
            pulsegen__pb2.Address.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def SetStartAddressI(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/pulsegen.PulseGenService/SetStartAddressI",
            pulsegen__pb2.Address.SerializeToString,
            pulsegen__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def GetStartAddressQ(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/pulsegen.PulseGenService/GetStartAddressQ",
            pulsegen__pb2.IndexSet.SerializeToString,
            pulsegen__pb2.Address.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def SetStartAddressQ(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/pulsegen.PulseGenService/SetStartAddressQ",
            pulsegen__pb2.Address.SerializeToString,
            pulsegen__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def TriggerManually(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/pulsegen.PulseGenService/TriggerManually",
            pulsegen__pb2.IndexSet.SerializeToString,
            pulsegen__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def LoadPulse(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/pulsegen.PulseGenService/LoadPulse",
            pulsegen__pb2.Pulse.SerializeToString,
            pulsegen__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def GetStatusFlags(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/pulsegen.PulseGenService/GetStatusFlags",
            pulsegen__pb2.EndpointIndex.SerializeToString,
            pulsegen__pb2.StatusFlags.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def ResetStatusFlags(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/pulsegen.PulseGenService/ResetStatusFlags",
            pulsegen__pb2.EndpointIndex.SerializeToString,
            pulsegen__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )
