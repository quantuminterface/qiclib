# -*- coding: utf-8 -*-
# CopyrightÂ© 2017-2023 Quantum Interface (quantuminterface@ipe.kit.edu)
# Richard Gebauer, IPE, Karlsruhe Institute of Technology
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: qic_unitcell.proto
"""Generated protocol buffer code."""
from google.protobuf.internal import enum_type_wrapper
from google.protobuf import descriptor as _descriptor
from google.protobuf import descriptor_pool as _descriptor_pool
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database

# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()


DESCRIPTOR = _descriptor_pool.Default().AddSerializedFile(
    b'\n\x12qic_unitcell.proto\x12\x0cqic_unitcell"\x1a\n\tCellIndex\x12\r\n\x05value\x18\x01 \x01(\r"\x1c\n\x0b\x43\x65llIndexes\x12\r\n\x05\x63\x65lls\x18\x01 \x03(\r"\x19\n\x08Unsigned\x12\r\n\x05value\x18\x01 \x01(\r"z\n\x08\x43\x65llInfo\x12\x11\n\tsequencer\x18\x01 \x01(\r\x12\x11\n\trecording\x18\x02 \x01(\r\x12\x0f\n\x07readout\x18\x03 \x01(\r\x12\x14\n\x0cmanipulation\x18\x04 \x01(\r\x12\x10\n\x08\x63oupling\x18\x05 \x01(\r\x12\x0f\n\x07storage\x18\x06 \x01(\r"4\n\x0b\x41llCellInfo\x12%\n\x05\x63\x65lls\x18\x01 \x03(\x0b\x32\x16.qic_unitcell.CellInfo"1\n\rStartCellInfo\x12\x11\n\tall_cells\x18\x01 \x01(\x08\x12\r\n\x05\x63\x65lls\x18\x02 \x03(\r"+\n\x0c\x42usyCellInfo\x12\x0c\n\x04\x62usy\x18\x01 \x01(\x08\x12\r\n\x05\x63\x65lls\x18\x02 \x03(\r"$\n\x12QubitStateCellInfo\x12\x0e\n\x06states\x18\x01 \x01(\r"H\n\x0cPlatformInfo\x12\x12\n\ncell_count\x18\x01 \x01(\r\x12\x11\n\tdac_count\x18\x02 \x01(\r\x12\x11\n\tadc_count\x18\x03 \x01(\r",\n\tDACStatus\x12\r\n\x05ready\x18\x01 \x01(\x08\x12\x10\n\x08overflow\x18\x02 \x01(\x08"D\n\tADCStatus\x12\r\n\x05valid\x18\x01 \x01(\x08\x12\x14\n\x0cover_voltage\x18\x02 \x01(\x08\x12\x12\n\nover_range\x18\x03 \x01(\x08"~\n\x0f\x43onverterStatus\x12\r\n\x05\x65rror\x18\x01 \x01(\x08\x12\x0e\n\x06report\x18\x02 \x01(\t\x12%\n\x04\x64\x61\x63s\x18\x03 \x03(\x0b\x32\x17.qic_unitcell.DACStatus\x12%\n\x04\x61\x64\x63s\x18\x04 \x03(\x0b\x32\x17.qic_unitcell.ADCStatus"\x19\n\x08\x44\x41\x43Index\x12\r\n\x05value\x18\x01 \x01(\r"\x1f\n\x0e\x44\x41\x43SignalTypes\x12\r\n\x05types\x18\x01 \x03(\r"6\n\nDACRouting\x12\x0c\n\x04type\x18\x01 \x01(\r\x12\x0b\n\x03\x64\x61\x63\x18\x02 \x01(\r\x12\r\n\x05\x63\x65lls\x18\x03 \x03(\r"\x1a\n\nADCIndexes\x12\x0c\n\x04\x61\x64\x63s\x18\x01 \x03(\r"6\n\nADCRouting\x12\x0b\n\x03\x61\x64\x63\x18\x01 \x01(\r\x12\r\n\x05\x63\x65lls\x18\x02 \x03(\r\x12\x0c\n\x04mode\x18\x03 \x01(\r"x\n\x14\x45xperimentParameters\x12.\n\x04mode\x18\x01 \x01(\x0e\x32 .qic_unitcell.DataCollectionMode\x12\r\n\x05shots\x18\x02 \x01(\r\x12\r\n\x05\x63\x65lls\x18\x03 \x03(\r\x12\x12\n\nrecordings\x18\x04 \x03(\r"\xc8\x02\n\x11\x45xperimentResults\x12\x10\n\x08progress\x18\x01 \x01(\r\x12\x14\n\x0cmax_progress\x18\x02 \x01(\r\x12\x10\n\x08\x66inished\x18\x03 \x01(\x08\x12.\n\x04mode\x18\x04 \x01(\x0e\x32 .qic_unitcell.DataCollectionMode\x12\x42\n\x07results\x18\x05 \x03(\x0b\x32\x31.qic_unitcell.ExperimentResults.SingleCellResults\x1a\x84\x01\n\x11SingleCellResults\x12\x15\n\rdata_double_1\x18\x01 \x03(\x01\x12\x15\n\rdata_double_2\x18\x02 \x03(\x01\x12\x15\n\rdata_sint32_1\x18\x03 \x03(\x11\x12\x15\n\rdata_sint32_2\x18\x04 \x03(\x11\x12\x13\n\x0b\x64\x61ta_uint32\x18\x05 \x03(\r"\x07\n\x05\x45mpty*}\n\x12\x44\x61taCollectionMode\x12\x0b\n\x07\x41VERAGE\x10\x00\x12\x13\n\x0f\x41MPLITUDE_PHASE\x10\x01\x12\x0b\n\x07IQCLOUD\x10\x02\x12\r\n\tRAW_TRACE\x10\x03\x12\n\n\x06STATES\x10\x04\x12\x0f\n\x0bSTATE_COUNT\x10\x05\x12\x0c\n\x08QM_JUMPS\x10\x06\x32\x96\n\n\x0fUnitCellService\x12=\n\x0cGetCellCount\x12\x13.qic_unitcell.Empty\x1a\x16.qic_unitcell.Unsigned"\x00\x12@\n\x0bGetCellInfo\x12\x17.qic_unitcell.CellIndex\x1a\x16.qic_unitcell.CellInfo"\x00\x12\x42\n\x0eGetAllCellInfo\x12\x13.qic_unitcell.Empty\x1a\x19.qic_unitcell.AllCellInfo"\x00\x12@\n\nStartCells\x12\x1b.qic_unitcell.StartCellInfo\x1a\x13.qic_unitcell.Empty"\x00\x12\x41\n\x0cGetBusyCells\x12\x13.qic_unitcell.Empty\x1a\x1a.qic_unitcell.BusyCellInfo"\x00\x12@\n\x0cGetSyncCells\x12\x13.qic_unitcell.Empty\x1a\x19.qic_unitcell.CellIndexes"\x00\x12\x44\n\x10GetDataSyncCells\x12\x13.qic_unitcell.Empty\x1a\x19.qic_unitcell.CellIndexes"\x00\x12I\n\x0eGetQubitStates\x12\x13.qic_unitcell.Empty\x1a .qic_unitcell.QubitStateCellInfo"\x00\x12\x44\n\x0fGetPlatformInfo\x12\x13.qic_unitcell.Empty\x1a\x1a.qic_unitcell.PlatformInfo"\x00\x12J\n\x12GetConverterStatus\x12\x13.qic_unitcell.Empty\x1a\x1d.qic_unitcell.ConverterStatus"\x00\x12\x42\n\x14\x43learConverterStatus\x12\x13.qic_unitcell.Empty\x1a\x13.qic_unitcell.Empty"\x00\x12H\n\x11GetDACSignalTypes\x12\x13.qic_unitcell.Empty\x1a\x1c.qic_unitcell.DACSignalTypes"\x00\x12J\n\x13GetDACRoutingSelect\x12\x16.qic_unitcell.DACIndex\x1a\x19.qic_unitcell.CellIndexes"\x00\x12\x46\n\x13SetDACRoutingSelect\x12\x18.qic_unitcell.DACRouting\x1a\x13.qic_unitcell.Empty"\x00\x12H\n\x14GetADCConnectedCells\x12\x13.qic_unitcell.Empty\x1a\x19.qic_unitcell.CellIndexes"\x00\x12\x46\n\x13GetADCRoutingSelect\x12\x13.qic_unitcell.Empty\x1a\x18.qic_unitcell.ADCIndexes"\x00\x12\x46\n\x13SetADCRoutingSelect\x12\x18.qic_unitcell.ADCRouting\x1a\x13.qic_unitcell.Empty"\x00\x12X\n\rRunExperiment\x12".qic_unitcell.ExperimentParameters\x1a\x1f.qic_unitcell.ExperimentResults"\x00\x30\x01\x62\x06proto3'
)

_DATACOLLECTIONMODE = DESCRIPTOR.enum_types_by_name["DataCollectionMode"]
DataCollectionMode = enum_type_wrapper.EnumTypeWrapper(_DATACOLLECTIONMODE)
AVERAGE = 0
AMPLITUDE_PHASE = 1
IQCLOUD = 2
RAW_TRACE = 3
STATES = 4
STATE_COUNT = 5
QM_JUMPS = 6


_CELLINDEX = DESCRIPTOR.message_types_by_name["CellIndex"]
_CELLINDEXES = DESCRIPTOR.message_types_by_name["CellIndexes"]
_UNSIGNED = DESCRIPTOR.message_types_by_name["Unsigned"]
_CELLINFO = DESCRIPTOR.message_types_by_name["CellInfo"]
_ALLCELLINFO = DESCRIPTOR.message_types_by_name["AllCellInfo"]
_STARTCELLINFO = DESCRIPTOR.message_types_by_name["StartCellInfo"]
_BUSYCELLINFO = DESCRIPTOR.message_types_by_name["BusyCellInfo"]
_QUBITSTATECELLINFO = DESCRIPTOR.message_types_by_name["QubitStateCellInfo"]
_PLATFORMINFO = DESCRIPTOR.message_types_by_name["PlatformInfo"]
_DACSTATUS = DESCRIPTOR.message_types_by_name["DACStatus"]
_ADCSTATUS = DESCRIPTOR.message_types_by_name["ADCStatus"]
_CONVERTERSTATUS = DESCRIPTOR.message_types_by_name["ConverterStatus"]
_DACINDEX = DESCRIPTOR.message_types_by_name["DACIndex"]
_DACSIGNALTYPES = DESCRIPTOR.message_types_by_name["DACSignalTypes"]
_DACROUTING = DESCRIPTOR.message_types_by_name["DACRouting"]
_ADCINDEXES = DESCRIPTOR.message_types_by_name["ADCIndexes"]
_ADCROUTING = DESCRIPTOR.message_types_by_name["ADCRouting"]
_EXPERIMENTPARAMETERS = DESCRIPTOR.message_types_by_name["ExperimentParameters"]
_EXPERIMENTRESULTS = DESCRIPTOR.message_types_by_name["ExperimentResults"]
_EXPERIMENTRESULTS_SINGLECELLRESULTS = _EXPERIMENTRESULTS.nested_types_by_name[
    "SingleCellResults"
]
_EMPTY = DESCRIPTOR.message_types_by_name["Empty"]
CellIndex = _reflection.GeneratedProtocolMessageType(
    "CellIndex",
    (_message.Message,),
    {
        "DESCRIPTOR": _CELLINDEX,
        "__module__": "qic_unitcell_pb2"
        # @@protoc_insertion_point(class_scope:qic_unitcell.CellIndex)
    },
)
_sym_db.RegisterMessage(CellIndex)

CellIndexes = _reflection.GeneratedProtocolMessageType(
    "CellIndexes",
    (_message.Message,),
    {
        "DESCRIPTOR": _CELLINDEXES,
        "__module__": "qic_unitcell_pb2"
        # @@protoc_insertion_point(class_scope:qic_unitcell.CellIndexes)
    },
)
_sym_db.RegisterMessage(CellIndexes)

Unsigned = _reflection.GeneratedProtocolMessageType(
    "Unsigned",
    (_message.Message,),
    {
        "DESCRIPTOR": _UNSIGNED,
        "__module__": "qic_unitcell_pb2"
        # @@protoc_insertion_point(class_scope:qic_unitcell.Unsigned)
    },
)
_sym_db.RegisterMessage(Unsigned)

CellInfo = _reflection.GeneratedProtocolMessageType(
    "CellInfo",
    (_message.Message,),
    {
        "DESCRIPTOR": _CELLINFO,
        "__module__": "qic_unitcell_pb2"
        # @@protoc_insertion_point(class_scope:qic_unitcell.CellInfo)
    },
)
_sym_db.RegisterMessage(CellInfo)

AllCellInfo = _reflection.GeneratedProtocolMessageType(
    "AllCellInfo",
    (_message.Message,),
    {
        "DESCRIPTOR": _ALLCELLINFO,
        "__module__": "qic_unitcell_pb2"
        # @@protoc_insertion_point(class_scope:qic_unitcell.AllCellInfo)
    },
)
_sym_db.RegisterMessage(AllCellInfo)

StartCellInfo = _reflection.GeneratedProtocolMessageType(
    "StartCellInfo",
    (_message.Message,),
    {
        "DESCRIPTOR": _STARTCELLINFO,
        "__module__": "qic_unitcell_pb2"
        # @@protoc_insertion_point(class_scope:qic_unitcell.StartCellInfo)
    },
)
_sym_db.RegisterMessage(StartCellInfo)

BusyCellInfo = _reflection.GeneratedProtocolMessageType(
    "BusyCellInfo",
    (_message.Message,),
    {
        "DESCRIPTOR": _BUSYCELLINFO,
        "__module__": "qic_unitcell_pb2"
        # @@protoc_insertion_point(class_scope:qic_unitcell.BusyCellInfo)
    },
)
_sym_db.RegisterMessage(BusyCellInfo)

QubitStateCellInfo = _reflection.GeneratedProtocolMessageType(
    "QubitStateCellInfo",
    (_message.Message,),
    {
        "DESCRIPTOR": _QUBITSTATECELLINFO,
        "__module__": "qic_unitcell_pb2"
        # @@protoc_insertion_point(class_scope:qic_unitcell.QubitStateCellInfo)
    },
)
_sym_db.RegisterMessage(QubitStateCellInfo)

PlatformInfo = _reflection.GeneratedProtocolMessageType(
    "PlatformInfo",
    (_message.Message,),
    {
        "DESCRIPTOR": _PLATFORMINFO,
        "__module__": "qic_unitcell_pb2"
        # @@protoc_insertion_point(class_scope:qic_unitcell.PlatformInfo)
    },
)
_sym_db.RegisterMessage(PlatformInfo)

DACStatus = _reflection.GeneratedProtocolMessageType(
    "DACStatus",
    (_message.Message,),
    {
        "DESCRIPTOR": _DACSTATUS,
        "__module__": "qic_unitcell_pb2"
        # @@protoc_insertion_point(class_scope:qic_unitcell.DACStatus)
    },
)
_sym_db.RegisterMessage(DACStatus)

ADCStatus = _reflection.GeneratedProtocolMessageType(
    "ADCStatus",
    (_message.Message,),
    {
        "DESCRIPTOR": _ADCSTATUS,
        "__module__": "qic_unitcell_pb2"
        # @@protoc_insertion_point(class_scope:qic_unitcell.ADCStatus)
    },
)
_sym_db.RegisterMessage(ADCStatus)

ConverterStatus = _reflection.GeneratedProtocolMessageType(
    "ConverterStatus",
    (_message.Message,),
    {
        "DESCRIPTOR": _CONVERTERSTATUS,
        "__module__": "qic_unitcell_pb2"
        # @@protoc_insertion_point(class_scope:qic_unitcell.ConverterStatus)
    },
)
_sym_db.RegisterMessage(ConverterStatus)

DACIndex = _reflection.GeneratedProtocolMessageType(
    "DACIndex",
    (_message.Message,),
    {
        "DESCRIPTOR": _DACINDEX,
        "__module__": "qic_unitcell_pb2"
        # @@protoc_insertion_point(class_scope:qic_unitcell.DACIndex)
    },
)
_sym_db.RegisterMessage(DACIndex)

DACSignalTypes = _reflection.GeneratedProtocolMessageType(
    "DACSignalTypes",
    (_message.Message,),
    {
        "DESCRIPTOR": _DACSIGNALTYPES,
        "__module__": "qic_unitcell_pb2"
        # @@protoc_insertion_point(class_scope:qic_unitcell.DACSignalTypes)
    },
)
_sym_db.RegisterMessage(DACSignalTypes)

DACRouting = _reflection.GeneratedProtocolMessageType(
    "DACRouting",
    (_message.Message,),
    {
        "DESCRIPTOR": _DACROUTING,
        "__module__": "qic_unitcell_pb2"
        # @@protoc_insertion_point(class_scope:qic_unitcell.DACRouting)
    },
)
_sym_db.RegisterMessage(DACRouting)

ADCIndexes = _reflection.GeneratedProtocolMessageType(
    "ADCIndexes",
    (_message.Message,),
    {
        "DESCRIPTOR": _ADCINDEXES,
        "__module__": "qic_unitcell_pb2"
        # @@protoc_insertion_point(class_scope:qic_unitcell.ADCIndexes)
    },
)
_sym_db.RegisterMessage(ADCIndexes)

ADCRouting = _reflection.GeneratedProtocolMessageType(
    "ADCRouting",
    (_message.Message,),
    {
        "DESCRIPTOR": _ADCROUTING,
        "__module__": "qic_unitcell_pb2"
        # @@protoc_insertion_point(class_scope:qic_unitcell.ADCRouting)
    },
)
_sym_db.RegisterMessage(ADCRouting)

ExperimentParameters = _reflection.GeneratedProtocolMessageType(
    "ExperimentParameters",
    (_message.Message,),
    {
        "DESCRIPTOR": _EXPERIMENTPARAMETERS,
        "__module__": "qic_unitcell_pb2"
        # @@protoc_insertion_point(class_scope:qic_unitcell.ExperimentParameters)
    },
)
_sym_db.RegisterMessage(ExperimentParameters)

ExperimentResults = _reflection.GeneratedProtocolMessageType(
    "ExperimentResults",
    (_message.Message,),
    {
        "SingleCellResults": _reflection.GeneratedProtocolMessageType(
            "SingleCellResults",
            (_message.Message,),
            {
                "DESCRIPTOR": _EXPERIMENTRESULTS_SINGLECELLRESULTS,
                "__module__": "qic_unitcell_pb2"
                # @@protoc_insertion_point(class_scope:qic_unitcell.ExperimentResults.SingleCellResults)
            },
        ),
        "DESCRIPTOR": _EXPERIMENTRESULTS,
        "__module__": "qic_unitcell_pb2"
        # @@protoc_insertion_point(class_scope:qic_unitcell.ExperimentResults)
    },
)
_sym_db.RegisterMessage(ExperimentResults)
_sym_db.RegisterMessage(ExperimentResults.SingleCellResults)

Empty = _reflection.GeneratedProtocolMessageType(
    "Empty",
    (_message.Message,),
    {
        "DESCRIPTOR": _EMPTY,
        "__module__": "qic_unitcell_pb2"
        # @@protoc_insertion_point(class_scope:qic_unitcell.Empty)
    },
)
_sym_db.RegisterMessage(Empty)

_UNITCELLSERVICE = DESCRIPTOR.services_by_name["UnitCellService"]
if _descriptor._USE_C_DESCRIPTORS == False:

    DESCRIPTOR._options = None
    _DATACOLLECTIONMODE._serialized_start = 1413
    _DATACOLLECTIONMODE._serialized_end = 1538
    _CELLINDEX._serialized_start = 36
    _CELLINDEX._serialized_end = 62
    _CELLINDEXES._serialized_start = 64
    _CELLINDEXES._serialized_end = 92
    _UNSIGNED._serialized_start = 94
    _UNSIGNED._serialized_end = 119
    _CELLINFO._serialized_start = 121
    _CELLINFO._serialized_end = 243
    _ALLCELLINFO._serialized_start = 245
    _ALLCELLINFO._serialized_end = 297
    _STARTCELLINFO._serialized_start = 299
    _STARTCELLINFO._serialized_end = 348
    _BUSYCELLINFO._serialized_start = 350
    _BUSYCELLINFO._serialized_end = 393
    _QUBITSTATECELLINFO._serialized_start = 395
    _QUBITSTATECELLINFO._serialized_end = 431
    _PLATFORMINFO._serialized_start = 433
    _PLATFORMINFO._serialized_end = 505
    _DACSTATUS._serialized_start = 507
    _DACSTATUS._serialized_end = 551
    _ADCSTATUS._serialized_start = 553
    _ADCSTATUS._serialized_end = 621
    _CONVERTERSTATUS._serialized_start = 623
    _CONVERTERSTATUS._serialized_end = 749
    _DACINDEX._serialized_start = 751
    _DACINDEX._serialized_end = 776
    _DACSIGNALTYPES._serialized_start = 778
    _DACSIGNALTYPES._serialized_end = 809
    _DACROUTING._serialized_start = 811
    _DACROUTING._serialized_end = 865
    _ADCINDEXES._serialized_start = 867
    _ADCINDEXES._serialized_end = 893
    _ADCROUTING._serialized_start = 895
    _ADCROUTING._serialized_end = 949
    _EXPERIMENTPARAMETERS._serialized_start = 951
    _EXPERIMENTPARAMETERS._serialized_end = 1071
    _EXPERIMENTRESULTS._serialized_start = 1074
    _EXPERIMENTRESULTS._serialized_end = 1402
    _EXPERIMENTRESULTS_SINGLECELLRESULTS._serialized_start = 1270
    _EXPERIMENTRESULTS_SINGLECELLRESULTS._serialized_end = 1402
    _EMPTY._serialized_start = 1404
    _EMPTY._serialized_end = 1411
    _UNITCELLSERVICE._serialized_start = 1541
    _UNITCELLSERVICE._serialized_end = 2843
# @@protoc_insertion_point(module_scope)
