# -*- coding: utf-8 -*-
# CopyrightÂ© 2017-2023 Quantum Interface (quantuminterface@ipe.kit.edu)
# Richard Gebauer, IPE, Karlsruhe Institute of Technology
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: sequencer.proto
"""Generated protocol buffer code."""
from google.protobuf import descriptor as _descriptor
from google.protobuf import descriptor_pool as _descriptor_pool
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database

# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()


DESCRIPTOR = _descriptor_pool.Default().AddSerializedFile(
    b'\n\x0fsequencer.proto\x12\tsequencer"\x1e\n\rEndpointIndex\x12\r\n\x05value\x18\x01 \x01(\r"\x15\n\x04\x42ool\x12\r\n\x05value\x18\x01 \x01(\x08"A\n\x07\x41verage\x12\'\n\x05index\x18\x01 \x01(\x0b\x32\x18.sequencer.EndpointIndex\x12\r\n\x05value\x18\x02 \x01(\r"0\n\rRegisterIndex\x12\x10\n\x08\x65ndpoint\x18\x01 \x01(\r\x12\r\n\x05index\x18\x02 \x01(\r"B\n\x08Register\x12\'\n\x05index\x18\x01 \x01(\x0b\x32\x18.sequencer.RegisterIndex\x12\r\n\x05value\x18\x02 \x01(\r"\x1c\n\x0cRegisterList\x12\x0c\n\x04list\x18\x01 \x03(\r"H\n\x0eProgramCounter\x12\'\n\x05index\x18\x01 \x01(\x0b\x32\x18.sequencer.EndpointIndex\x12\r\n\x05value\x18\x02 \x01(\r"[\n\x05\x44\x65lay\x12\'\n\x05index\x18\x01 \x01(\x0b\x32\x18.sequencer.EndpointIndex\x12\x0b\n\x03reg\x18\x02 \x01(\r\x12\x0c\n\x04time\x18\x03 \x01(\x01\x12\x0e\n\x06\x63ycles\x18\x04 \x01(\r"]\n\x07Program\x12\'\n\x05index\x18\x01 \x01(\x0b\x32\x18.sequencer.EndpointIndex\x12\x14\n\x0cprogram_data\x18\x02 \x03(\r\x12\x13\n\x0b\x64\x65scription\x18\x03 \x01(\t"d\n\x0cStatusReport\x12\x0c\n\x04\x62usy\x18\x01 \x01(\x08\x12\x0f\n\x07relaxed\x18\x02 \x01(\x08\x12\x14\n\x0cwait_on_sync\x18\x03 \x01(\x08\x12\r\n\x05\x65rror\x18\x04 \x01(\t\x12\x10\n\x08warnings\x18\x05 \x03(\t"\x07\n\x05\x45mpty2\xa0\x08\n\x10SequencerService\x12\x36\n\x07GetBusy\x12\x18.sequencer.EndpointIndex\x1a\x0f.sequencer.Bool"\x00\x12\x39\n\nGetRelaxed\x12\x18.sequencer.EndpointIndex\x1a\x0f.sequencer.Bool"\x00\x12=\n\x0bGetAverages\x12\x18.sequencer.EndpointIndex\x1a\x12.sequencer.Average"\x00\x12\x35\n\x0bSetAverages\x12\x12.sequencer.Average\x1a\x10.sequencer.Empty"\x00\x12J\n\x11GetProgramCounter\x12\x18.sequencer.EndpointIndex\x1a\x19.sequencer.ProgramCounter"\x00\x12>\n\x0bGetRegister\x12\x18.sequencer.RegisterIndex\x1a\x13.sequencer.Register"\x00\x12\x36\n\x0bSetRegister\x12\x13.sequencer.Register\x1a\x10.sequencer.Empty"\x00\x12\x46\n\x0fGetAllRegisters\x12\x18.sequencer.EndpointIndex\x1a\x17.sequencer.RegisterList"\x00\x12\x30\n\x08SetDelay\x12\x10.sequencer.Delay\x1a\x10.sequencer.Empty"\x00\x12\x35\n\x0bLoadProgram\x12\x12.sequencer.Program\x1a\x10.sequencer.Empty"\x00\x12\x38\n\x07StartAt\x12\x19.sequencer.ProgramCounter\x1a\x10.sequencer.Empty"\x00\x12H\n\x0fGetStartAddress\x12\x18.sequencer.EndpointIndex\x1a\x19.sequencer.ProgramCounter"\x00\x12@\n\x0fSetStartAddress\x12\x19.sequencer.ProgramCounter\x1a\x10.sequencer.Empty"\x00\x12\x36\n\x06Resume\x12\x18.sequencer.EndpointIndex\x1a\x10.sequencer.Empty"\x00\x12\x35\n\x05Reset\x12\x18.sequencer.EndpointIndex\x1a\x10.sequencer.Empty"\x00\x12\x34\n\x04Stop\x12\x18.sequencer.EndpointIndex\x1a\x10.sequencer.Empty"\x00\x12\x43\n\x0cReportStatus\x12\x18.sequencer.EndpointIndex\x1a\x17.sequencer.StatusReport"\x00\x62\x06proto3'
)


_ENDPOINTINDEX = DESCRIPTOR.message_types_by_name["EndpointIndex"]
_BOOL = DESCRIPTOR.message_types_by_name["Bool"]
_AVERAGE = DESCRIPTOR.message_types_by_name["Average"]
_REGISTERINDEX = DESCRIPTOR.message_types_by_name["RegisterIndex"]
_REGISTER = DESCRIPTOR.message_types_by_name["Register"]
_REGISTERLIST = DESCRIPTOR.message_types_by_name["RegisterList"]
_PROGRAMCOUNTER = DESCRIPTOR.message_types_by_name["ProgramCounter"]
_DELAY = DESCRIPTOR.message_types_by_name["Delay"]
_PROGRAM = DESCRIPTOR.message_types_by_name["Program"]
_STATUSREPORT = DESCRIPTOR.message_types_by_name["StatusReport"]
_EMPTY = DESCRIPTOR.message_types_by_name["Empty"]
EndpointIndex = _reflection.GeneratedProtocolMessageType(
    "EndpointIndex",
    (_message.Message,),
    {
        "DESCRIPTOR": _ENDPOINTINDEX,
        "__module__": "sequencer_pb2"
        # @@protoc_insertion_point(class_scope:sequencer.EndpointIndex)
    },
)
_sym_db.RegisterMessage(EndpointIndex)

Bool = _reflection.GeneratedProtocolMessageType(
    "Bool",
    (_message.Message,),
    {
        "DESCRIPTOR": _BOOL,
        "__module__": "sequencer_pb2"
        # @@protoc_insertion_point(class_scope:sequencer.Bool)
    },
)
_sym_db.RegisterMessage(Bool)

Average = _reflection.GeneratedProtocolMessageType(
    "Average",
    (_message.Message,),
    {
        "DESCRIPTOR": _AVERAGE,
        "__module__": "sequencer_pb2"
        # @@protoc_insertion_point(class_scope:sequencer.Average)
    },
)
_sym_db.RegisterMessage(Average)

RegisterIndex = _reflection.GeneratedProtocolMessageType(
    "RegisterIndex",
    (_message.Message,),
    {
        "DESCRIPTOR": _REGISTERINDEX,
        "__module__": "sequencer_pb2"
        # @@protoc_insertion_point(class_scope:sequencer.RegisterIndex)
    },
)
_sym_db.RegisterMessage(RegisterIndex)

Register = _reflection.GeneratedProtocolMessageType(
    "Register",
    (_message.Message,),
    {
        "DESCRIPTOR": _REGISTER,
        "__module__": "sequencer_pb2"
        # @@protoc_insertion_point(class_scope:sequencer.Register)
    },
)
_sym_db.RegisterMessage(Register)

RegisterList = _reflection.GeneratedProtocolMessageType(
    "RegisterList",
    (_message.Message,),
    {
        "DESCRIPTOR": _REGISTERLIST,
        "__module__": "sequencer_pb2"
        # @@protoc_insertion_point(class_scope:sequencer.RegisterList)
    },
)
_sym_db.RegisterMessage(RegisterList)

ProgramCounter = _reflection.GeneratedProtocolMessageType(
    "ProgramCounter",
    (_message.Message,),
    {
        "DESCRIPTOR": _PROGRAMCOUNTER,
        "__module__": "sequencer_pb2"
        # @@protoc_insertion_point(class_scope:sequencer.ProgramCounter)
    },
)
_sym_db.RegisterMessage(ProgramCounter)

Delay = _reflection.GeneratedProtocolMessageType(
    "Delay",
    (_message.Message,),
    {
        "DESCRIPTOR": _DELAY,
        "__module__": "sequencer_pb2"
        # @@protoc_insertion_point(class_scope:sequencer.Delay)
    },
)
_sym_db.RegisterMessage(Delay)

Program = _reflection.GeneratedProtocolMessageType(
    "Program",
    (_message.Message,),
    {
        "DESCRIPTOR": _PROGRAM,
        "__module__": "sequencer_pb2"
        # @@protoc_insertion_point(class_scope:sequencer.Program)
    },
)
_sym_db.RegisterMessage(Program)

StatusReport = _reflection.GeneratedProtocolMessageType(
    "StatusReport",
    (_message.Message,),
    {
        "DESCRIPTOR": _STATUSREPORT,
        "__module__": "sequencer_pb2"
        # @@protoc_insertion_point(class_scope:sequencer.StatusReport)
    },
)
_sym_db.RegisterMessage(StatusReport)

Empty = _reflection.GeneratedProtocolMessageType(
    "Empty",
    (_message.Message,),
    {
        "DESCRIPTOR": _EMPTY,
        "__module__": "sequencer_pb2"
        # @@protoc_insertion_point(class_scope:sequencer.Empty)
    },
)
_sym_db.RegisterMessage(Empty)

_SEQUENCERSERVICE = DESCRIPTOR.services_by_name["SequencerService"]
if _descriptor._USE_C_DESCRIPTORS == False:

    DESCRIPTOR._options = None
    _ENDPOINTINDEX._serialized_start = 30
    _ENDPOINTINDEX._serialized_end = 60
    _BOOL._serialized_start = 62
    _BOOL._serialized_end = 83
    _AVERAGE._serialized_start = 85
    _AVERAGE._serialized_end = 150
    _REGISTERINDEX._serialized_start = 152
    _REGISTERINDEX._serialized_end = 200
    _REGISTER._serialized_start = 202
    _REGISTER._serialized_end = 268
    _REGISTERLIST._serialized_start = 270
    _REGISTERLIST._serialized_end = 298
    _PROGRAMCOUNTER._serialized_start = 300
    _PROGRAMCOUNTER._serialized_end = 372
    _DELAY._serialized_start = 374
    _DELAY._serialized_end = 465
    _PROGRAM._serialized_start = 467
    _PROGRAM._serialized_end = 560
    _STATUSREPORT._serialized_start = 562
    _STATUSREPORT._serialized_end = 662
    _EMPTY._serialized_start = 664
    _EMPTY._serialized_end = 671
    _SEQUENCERSERVICE._serialized_start = 674
    _SEQUENCERSERVICE._serialized_end = 1730
# @@protoc_insertion_point(module_scope)
